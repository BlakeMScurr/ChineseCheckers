!function(e){var t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={i:o,l:!1,exports:{}};return e[o].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(o,n,function(t){return e[t]}.bind(null,n));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.game=class{constructor(e,t,r,o,n){this.startingPosition=r=>{!function(e){for(var t=0;t<e.length-1;t++)for(var r=t+1;r<e.length;r++){var o=e[t],n=e[r];if(o.name==n.name)throw"two players have name "+o.name;if(o.colour==n.colour)throw"two players have colour "+o.colour}}(r);var o=e.board();return t(o,r),o},this.validateMove=r,this.applyMove=o,this.winCondition=n}};t.player=class{constructor(e,t){this.name=e,this.colour=t}};t.graph=class{constructor(e){this.edges=new Map,e.forEach((e,t)=>{var r=t.string();null==this.edges.get(r)&&this.edges.set(r,new Map),e.forEach((e,t)=>{var o;null===(o=this.edges.get(r))||void 0===o||o.set(t.string(),e)})})}traverse(e,t){return t.forEach(t=>{var r=this.hop(e,t);null!=r&&(e=r)}),e}hop(e,t){var r=this.edges.get(e.string());if(null!=r)for(const[e,o]of r.entries())if(o.dir==t)return i(e)}board(){var e=new Map;for(const[r,o]of this.edges)e.set(i(r),t.emptyTile);return new o(e)}};t.direction=class{constructor(e){this.dir=e}};t.match=class{constructor(e,t,r){this.gameType=e,this.topology=t,this.players=r,this.moves=[],this.currentPlayer=0,this.boardState=e.startingPosition(r)}move(e){if(this.gameType.validateMove(this.currentPlayer,this.boardState,this.topology,e)){this.gameType.applyMove(this.currentPlayer,this.boardState,this.topology,e),this.currentPlayer=(this.currentPlayer+1)%this.players.length,this.moves.push(e);var t=this.gameType.winCondition(this.players,this.currentPlayer,this.boardState);return-1!=t?this.players[t]:void 0}}winner(){return this.gameType.winCondition(this.players,this.currentPlayer,this.boardState)}};class o{constructor(e){this.state=[],e.forEach((e,t)=>{null==this.state[t.x]&&this.set(e,t),this.state[t.x][t.y]=e})}forEach(e){this.state.forEach(t=>{t.forEach(t=>{e(t)})})}set(e,t){null==this.state[t.x]&&(this.state[t.x]=[]),this.state[t.x][t.y]=e}get(e){var r=this.state[e.x][e.y];return null==r?t.emptyTile:r}}t.board=o;class n{constructor(e,t){this.owner=e,this.type=t}}t.tile=n,t.emptyTile=new n(-1,"empty");function i(e){var t=JSON.parse(e);return new s(t.x,t.y)}t.move=class{constructor(e){this.coordinates=e}string(){return this.coordinates.map(e=>"("+e.x+","+e.y+")").join(", ")}};class s{constructor(e,t){this.x=e,this.y=t}equals(e){return this.string()==e.string()}string(){return JSON.stringify(this)}}t.coordinate=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=r(2),n=r(0);var i=["white","violet"],s=["yellow","purple"];function a(e){document.querySelector("#title").innerHTML=-1==e.winner()?u[e.currentPlayer].name+"'s turn":u[e.winner()].name+" is the winner!!!"}function l(e){var t=Array.from(e.classList),r=-1,o=-1;if(t.forEach(e=>{e.match(/row*/)&&(r=+e.replace("row","")),e.match(/column*/)&&(o=+e.replace("column",""))}),-1==r||-1==o)throw"no row found: row: "+r+", column: "+o;return new n.coordinate(o,r)}function c(e,t){var r=document.getElementsByClassName("tile");for(let c of Array.from(r)){var o=c.childNodes[0],n=l(c);(n.x+n.y)%2==0?(c.style.backgroundColor="black",o.style.backgroundColor="black"):(c.style.backgroundColor="red",o.style.backgroundColor="red");var a=e.boardState.get(n);-1!=a.owner&&"empty"!=a.type&&(o.style.backgroundColor=i[a.owner],"queen"==a.type&&(o.style.backgroundColor=s[a.owner])),t.coordinates.forEach(e=>{n.x==e.x&&n.y==e.y&&(n.x+n.y)%2==0&&(c.style.backgroundColor="444",-1==a.owner&&(o.style.backgroundColor="444"))})}}var u=[new n.player("Blake",i[0]),new n.player("Anja",i[1])],h=o.newCheckersMatch(u),d=new class{constructor(){this.coordinates=[]}add(e){if((e.x+e.y)%2==0)if(0!=this.coordinates.length){var t=this.coordinates[this.coordinates.length-1];t.x==e.x&&t.y==e.y?this.coordinates.pop():this.coordinates.push(e)}else this.coordinates.push(e)}clear(){this.coordinates=[]}move(){return new n.move(this.coordinates)}};a(h),c(h,d);var y=document.getElementsByClassName("tile");for(let e of Array.from(y)){const t=l(e);e.onclick=(e=>()=>{d.add(e),c(h,d)})(t)}function f(){h.move(d.move()),d.clear(),c(h,d),a(h)}document.getElementById("move").onclick=()=>{f()},document.addEventListener("keydown",e=>{"Enter"==e.key&&f()})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=r(0),n=r(3),i=new o.tile(0,"pawn"),s=new o.tile(1,"pawn"),a=new o.tile(0,"queen"),l=new o.tile(1,"queen");class c{topology(){return n.rightGrid(8,8)}initialiseState(e,t){for(var r=0;r<4;r++)e.set(i,new o.coordinate(2*r,0)),e.set(i,new o.coordinate(2*r+1,1)),e.set(i,new o.coordinate(2*r,2)),e.set(s,new o.coordinate(2*r+1,5)),e.set(s,new o.coordinate(2*r,6)),e.set(s,new o.coordinate(2*r+1,7))}validateMove(e,t,r,n){if(n.coordinates.length<2)throw"a move in checkers consists of at least two coordinates, the position of the piece to move, the position it moves to, and any positions it moves via";var i,s=t.get(n.coordinates[0]);if(e!=s.owner)return console.log("invalid move: first coordinate in a move should be the current player.\nCurrent player: "+e+", player owning selected piece: "+s.owner+"\nFor move "+n.string()+"\nSelected piece: "+JSON.stringify(s)),!1;(i=n,i.coordinates.slice(1,i.coordinates.length)).forEach(e=>{if(t.get(e)!=o.emptyTile)return console.log("invalid move: pieces must hop to and via empty tiles\nNon-empty tile: "+JSON.stringify(t.get(e))+" at "+JSON.stringify(e)),!1});var a=u(s);if(2==n.coordinates.length){var l=n.coordinates[0],c=n.coordinates[1],d=!1;if(a.forEach(e=>{r.traverse(l,[e,"left"]).equals(c)&&(d=!0),r.traverse(l,[e,"right"]).equals(c)&&(d=!0)}),d)return!0}var y=h(n,r,a);if(null==y)return console.log("invalid move: hops must be two steps in a valid direction"),!1;for(var f=0;f<y.length;f++){var v=t.get(y[f]).owner;if(v==e||-1==v)return!1}return!0}applyMove(e,t,r,n){var i=n.coordinates,s=i[i.length-1];t.set(t.get(i[0]),s),t.set(o.emptyTile,i[0]);var c=h(n,r,u(t.get(s)));null==c||c.forEach(e=>{t.set(o.emptyTile,e)}),7==s.y&&0==e&&t.set(a,s),0==s.y&&1==e&&t.set(l,s)}winCondition(e,t,r){var o=!1,n=!1;return r.forEach(e=>{0==e.owner&&(o=!0),1==e.owner&&(n=!0)}),o?n?-1:0:1}}function u(e){return"queen"==e.type?["up","down"]:0==e.owner?["up"]:["down"]}function h(e,t,r){var o=!0,n=[];if(function(e,t){for(var r=1;r<e.length;r++){var o=e[r-1],n=e[r];t(o,n)}}(e.coordinates,(e,i)=>{var s=!1;r.forEach(r=>{if(t.traverse(e,[r,r,"left","left"]).equals(i)){s=!0;var o=t.traverse(e,[r,"left"]);n.push(o)}if(t.traverse(e,[r,r,"right","right"]).equals(i)){s=!0;o=t.traverse(e,[r,"right"]);n.push(o)}}),s||(o=!1)}),o)return n}t.newCheckersMatch=function(e){var t=new c,r=t.topology();return new o.match(new o.game(r,t.initialiseState,t.validateMove,t.applyMove,t.winCondition),r,e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const o=r(0);t.rightGrid=function(e,t){for(var r=new Map,n=Array(),i=0;i<e;i++)for(var s=0;s<t;s++)n.push(new o.coordinate(i,s));var a=new o.direction("down"),l=new o.direction("up"),c=new o.direction("left"),u=new o.direction("right");return n.forEach(e=>{r.set(e,new Map),n.forEach(t=>{var o,n,i,s;e.x==t.x&&(e.y==t.y+1?null===(o=r.get(e))||void 0===o||o.set(t,a):e.y==t.y-1&&(null===(n=r.get(e))||void 0===n||n.set(t,l))),e.y==t.y&&(e.x==t.x+1?null===(i=r.get(e))||void 0===i||i.set(t,c):e.x==t.x-1&&(null===(s=r.get(e))||void 0===s||s.set(t,u)))})}),new o.graph(r)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,