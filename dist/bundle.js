!function(e){var t={};function o(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=1)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Tester=class{test(){return"yeah, I'm working"}};t.game=class{constructor(e,t,o,r,n){this.startingPosition=o=>{!function(e){for(var t=0;t<e.length-1;t++)for(var o=t+1;o<e.length;o++){var r=e[t],n=e[o];if(r.name==n.name)throw"two players have name "+r.name;if(r.colour==n.colour)throw"two players have colour "+r.colour}}(o);var r=e.board();return t(r,o),r},this.validateMove=o,this.applyMove=r,this.winCondition=n}};t.player=class{constructor(e,t){this.name=e,this.colour=t}};t.graph=class{constructor(e){this.edges=new Map,e.forEach((e,t)=>{var o,r;null==this.edges.get(t.x)&&this.edges.set(t.x,new Map),null==(null===(o=this.edges.get(t.x))||void 0===o?void 0:o.get(t.y))&&(null===(r=this.edges.get(t.x))||void 0===r||r.set(t.y,new Map)),e.forEach((e,o)=>{var r,n,i,s,a,l,c;null==(null===(n=null===(r=this.edges.get(t.x))||void 0===r?void 0:r.get(t.y))||void 0===n?void 0:n.get(o.x))&&(null===(s=null===(i=this.edges.get(t.x))||void 0===i?void 0:i.get(t.y))||void 0===s||s.set(o.x,new Map)),null===(c=null===(l=null===(a=this.edges.get(t.x))||void 0===a?void 0:a.get(t.y))||void 0===l?void 0:l.get(o.x))||void 0===c||c.set(o.y,e)})})}traverse(e,t){return t.forEach(t=>{var o=this.hop(e,t);null!=o&&(e=o)}),e}hop(e,t){var o,r=null===(o=this.edges.get(e.x))||void 0===o?void 0:o.get(e.y);if(null!=r)for(const[e,o]of r.entries())for(const[r,n]of o.entries())if(n.dir==t)return new i(e,r)}board(){var e=new Map;for(const[o,r]of this.edges)for(const[n,s]of r)e.set(new i(o,n),t.emptyTile);return new r(e)}};t.direction=class{constructor(e){this.dir=e}};t.match=class{constructor(e,t,o){this.gameType=e,this.topology=t,this.players=o,this.moves=[],this.currentPlayer=0,this.boardState=e.startingPosition(o)}move(e){if(this.gameType.validateMove(this.currentPlayer,this.boardState,this.topology,e)){this.gameType.applyMove(this.currentPlayer,this.boardState,this.topology,e),this.currentPlayer=(this.currentPlayer+1)%this.players.length;var t=this.gameType.winCondition(this.players,this.currentPlayer,this.boardState);return-1!=t?this.players[t]:void 0}console.log("invalid move")}winner(){return this.gameType.winCondition(this.players,this.currentPlayer,this.boardState)}};class r{constructor(e){this.state=[],e.forEach((e,t)=>{null==this.state[t.x]&&this.set(e,t),this.state[t.x][t.y]=e})}forEach(e){this.state.forEach(t=>{t.forEach(t=>{e(t)})})}set(e,t){null==this.state[t.x]&&(this.state[t.x]=[]),this.state[t.x][t.y]=e}get(e){var o=this.state[e.x][e.y];return null==o?t.emptyTile:o}}t.board=r;class n{constructor(e,t){this.owner=e,this.type=t}}t.tile=n,t.emptyTile=new n(-1,"empty");t.move=class{constructor(e){this.coordinates=e}string(){return this.coordinates.map(e=>"("+e.x+","+e.y+")").join(", ")}};class i{constructor(e,t){this.x=e,this.y=t}equals(e){return JSON.stringify(this)==JSON.stringify(e)}}t.coordinate=i},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=o(2),n=o(0);var i=["white","violet"],s=["yellow","purple"];function a(e){var t=document.querySelector("#title");console.log("working?"),t.innerHTML=-1==e.winner()?"Game on!":u[e.winner()].name+" is the winner!!!"}function l(e){var t=Array.from(e.classList),o=-1,r=-1;if(t.forEach(e=>{e.match(/row*/)&&(o=+e.replace("row","")),e.match(/column*/)&&(r=+e.replace("column",""))}),-1==o||-1==r)throw"no row found: row: "+o+", column: "+r;return new n.coordinate(r,o)}function c(e,t){var o=document.getElementsByClassName("tile");for(let c of Array.from(o)){var r=c.childNodes[0],n=l(c);(n.x+n.y)%2==0?(c.style.backgroundColor="black",r.style.backgroundColor="black"):(c.style.backgroundColor="red",r.style.backgroundColor="red");var a=e.boardState.get(n);-1!=a.owner&&"empty"!=a.type&&(r.style.backgroundColor=i[a.owner],"queen"==a.type&&(r.style.backgroundColor=s[a.owner])),t.coordinates.forEach(e=>{n.x==e.x&&n.y==e.y&&(n.x+n.y)%2==0&&(c.style.backgroundColor="444",-1==a.owner&&(r.style.backgroundColor="444"))})}}var u=[new n.player("blake",i[0]),new n.player("anja",i[1])],d=r.newCheckersMatch(u),h=new class{constructor(){this.coordinates=[]}add(e){if((e.x+e.y)%2==0)if(0!=this.coordinates.length){var t=this.coordinates[this.coordinates.length-1];t.x==e.x&&t.y==e.y?this.coordinates.pop():this.coordinates.push(e)}else this.coordinates.push(e)}clear(){this.coordinates=[]}move(){return new n.move(this.coordinates)}};a(d),c(d,h);var v=document.getElementsByClassName("tile");for(let e of Array.from(v)){const t=l(e);e.onclick=(e=>()=>{h.add(e),c(d,h)})(t)}function y(){d.move(h.move()),h.clear(),c(d,h),a(d)}document.getElementById("move").onclick=()=>{y()},document.addEventListener("keydown",e=>{"Enter"==e.key&&y()})},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=o(0),n=o(3),i=new r.tile(0,"pawn"),s=new r.tile(1,"pawn"),a=new r.tile(0,"queen"),l=new r.tile(1,"queen");class c{topology(){return n.rightGrid(8,8)}initialiseState(e,t){for(var o=0;o<4;o++)e.set(i,new r.coordinate(2*o,0)),e.set(i,new r.coordinate(2*o+1,1)),e.set(i,new r.coordinate(2*o,2)),e.set(s,new r.coordinate(2*o+1,5)),e.set(s,new r.coordinate(2*o,6)),e.set(s,new r.coordinate(2*o+1,7));console.log(e)}validateMove(e,t,o,n){if(n.coordinates.length<2)throw"a move in checkers consists of at least two coordinates, the position of the piece to move, the position it moves to, and any positions it moves via";var i,s=t.get(n.coordinates[0]);if(e!=s.owner)return console.log("invalid move: first coordinate in a move should be the current player.\nCurrent player: "+e+", player owning selected piece: "+s.owner+"\nFor move "+n.string()+"\nSelected piece: "+JSON.stringify(s)),!1;(i=n,i.coordinates.slice(1,i.coordinates.length)).forEach(e=>{if(t.get(e)!=r.emptyTile)return console.log("invalid move: pieces must hop to and via empty tiles\nNon-empty tile: "+JSON.stringify(t.get(e))+" at "+JSON.stringify(e)),!1});var a=u(s);if(2==n.coordinates.length){var l=n.coordinates[0],c=n.coordinates[1],h=!1;if(a.forEach(e=>{o.traverse(l,[e,"left"]).equals(c)&&(h=!0),o.traverse(l,[e,"right"]).equals(c)&&(h=!0)}),h)return!0}var v=d(n,o,a);if(null==v)return console.log("invalid move: hops must be two steps in a valid direction"),!1;for(var y=0;y<v.length;y++){var f=t.get(v[y]).owner;if(f==e||-1==f)return!1}return!0}applyMove(e,t,o,n){var i=n.coordinates,s=i[i.length-1];t.set(t.get(i[0]),s),t.set(r.emptyTile,i[0]);var c=d(n,o,u(t.get(s)));null==c||c.forEach(e=>{t.set(r.emptyTile,e)}),7==s.y&&0==e&&t.set(a,s),0==s.y&&1==e&&t.set(l,s)}winCondition(e,t,o){var r=!1,n=!1;return o.forEach(e=>{0==e.owner&&(r=!0),1==e.owner&&(n=!0)}),r?n?-1:0:1}}function u(e){return"queen"==e.type?["up","down"]:0==e.owner?["up"]:["down"]}function d(e,t,o){var r=!0,n=[];if(function(e,t){for(var o=1;o<e.length;o++){var r=e[o-1],n=e[o];t(r,n)}}(e.coordinates,(e,i)=>{var s=!1;o.forEach(o=>{if(t.traverse(e,[o,o,"left","left"]).equals(i)){s=!0;var r=t.traverse(e,[o,"left"]);n.push(r)}t.traverse(e,[o,o,"right","right"]).equals(i)&&(s=!0,null==(r=t.traverse(e,[o,"right"]))&&console.log("alas! the refined and noble french!"),console.log("based pushing "+JSON.stringify(r)),n.push(r),console.log(JSON.stringify(n[0])))}),s||(r=!1)}),n.length>=1&&console.log(JSON.stringify(n[0])),r)return n}t.newCheckersMatch=function(e){var t=new c,o=t.topology();return new r.match(new r.game(o,t.initialiseState,t.validateMove,t.applyMove,t.winCondition),o,e)}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=o(0);t.rightGrid=function(e,t){for(var o=new Map,n=Array(),i=0;i<e;i++)for(var s=0;s<t;s++)n.push(new r.coordinate(i,s));var a=new r.direction("down"),l=new r.direction("up"),c=new r.direction("left"),u=new r.direction("right");return n.forEach(e=>{o.set(e,new Map),n.forEach(t=>{var r,n,i,s;e.x==t.x&&(e.y==t.y+1?null===(r=o.get(e))||void 0===r||r.set(t,a):e.y==t.y-1&&(null===(n=o.get(e))||void 0===n||n.set(t,l))),e.y==t.y&&(e.x==t.x+1?null===(i=o.get(e))||void 0===i||i.set(t,c):e.x==t.x-1&&(null===(s=o.get(e))||void 0===s||s.set(t,u)))})}),new r.graph(o)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,